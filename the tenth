    The model that we have considered so far in this chapter - the pendulum - is very simple system, yet it exhibit extremely rich
behavior. It is thus not surprising that other slightly more complicated systems are also capable of chaoic behavior. When we 
think of chaoic or unpredictable behavior, an example that naturelly comesto mind is the weather. Because of the economic
importance of having accurate weather predictions, a good deal of effort has been devoted to this problem. While much of this
effort has gone into computer modeling of Earth's atmosphere, much has also been devoted to understanding the weather problem 
from a more fundamental point of view. It was work of this kind by the atmospheric scientist E. N, Lorenz that provided a major
contribution to the modern field of chaos. 
    It turns out that the Euler algorithm can actually br used to treat the Lorenz problem, for the following reason. Several of 
the terms in the Lorenz equations play the same role as the damping term in the pendulum equation of motion, while other terms 
are analogous to the driving force. If the time step in the Euler algorithm is sufficient small, the energy lost ( or added ) 
through the error terms associated with the Euler method can be made much small than the energy lost to the effective damping, 
or added by the effective driving force. In this situation, the Euler method provides an accurate solution, as can be verified 
directly by simply repeating the Euler calculation with the Runge-Kutta method.
Lorenz was studying the basic equations of fluid mechanics, which are known as the Navier-Stokes equations; they can be thought
of as Newton's laws written in a form appropriate for a fluid. These are a complicated set of differential equations that 
describe the velocity, temperature, density, etc., as functions of position and time, and they are very different to solve
analytically in cases of practical interest. The specific situation he considered was the Rayleigh-Benard problem, which concerns
a fluid in a container whose top and bottom surfaces are held at different temperatures. It had long been known that as the
difference between these two temperatures is increased, the fluid can undergo transitions from a stationary state ( no fluid
motion ) to steady flow ( nonzero flow velocities that are constant in time, also referred to as convection ) to chaoic flow. 
Indeed, Lorenz grossly oversimplified the problem as Lorenz reduced it to only three equations.
    These are now known as the Lorenz equations ( or equivalently, the Lorenz model ). The Lorenz variables x, y and z are derived 
from the temperature, density, and velocity variables in the original Navier-Stokes equations, and the parameters sigma, tau and
b are measures of the temperature difference across the fluid and other fluid parameters.
Returning to the Lorenz problem, these are three parameters sigma, tau and b, and the behavior one finds dependd on their values. 
We will follow custom and use sigma=10 and b=8/3. According to some authors these values correspond to cold water, but given the
highly simolified nature of the model you shouldn't take this claim seriously! The parameter tau is a measure of the temperature 
difference between the top and bottom surfaces of the fluid. For small tau the effective force on the fluid.
As tau increases this force increases, so tau plays a role analogous to the frive amplitude, F_D, in the pendulum problem.
 The codes are as follows:
 from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt


class lorenz_model:
    def __init__(self,tau=5):
        self.sigma=10
        self.b=8./3
        self.tau=tau
        self.dt=0.0001
        self.x=[1]
        self.y=[0]
        self.z=[0]
        self.t=[0]
        self.t_end=50
        
    def Euler_method(self):
        while self.t[-1]<=self.t_end:
            self.xi=self.x[-1]+self.sigma*(self.y[-1]-self.x[-1])*self.dt
            self.yi=self.y[-1]+(-self.x[-1]*self.z[-1]+self.tau*self.x[-1]-self.y[-1])*self.dt
            self.zi=self.z[-1]+(self.x[-1]*self.y[-1]-self.b*self.z[-1])*self.dt
            self.x.append(self.xi)
            self.y.append(self.yi)
            self.z.append(self.zi)
            self.t.append(self.t[-1]+self.dt)

        
    def phase_section(self):
        self.dt=0.0001
        self.new_y_x0=[]
        self.new_z_x0=[]
        self.new_z_y0=[]
        self.new_x_y0=[]
        while self.t[-1]<=1000:
            self.xi=self.x[-1]+self.sigma*(self.y[-1]-self.x[-1])*self.dt
            self.yi=self.y[-1]+(-self.x[-1]*self.z[-1]+self.tau*self.x[-1]-self.y[-1])*self.dt
            self.zi=self.z[-1]+(self.x[-1]*self.y[-1]-self.b*self.z[-1])*self.dt
            self.x.append(self.xi)
            self.y.append(self.yi)
            self.z.append(self.zi)
            self.t.append(self.t[-1]+self.dt)

            if self.t[-1]>30:
                if abs(self.xi)<=0.001:
                    self.new_y_x0.append(self.yi)
                    self.new_z_x0.append(self.zi)
                if abs(self.yi)<=0.001:
                    self.new_x_y0.append(self.xi)
                    self.new_z_y0.append(self.zi)

        
    def pltz(self,style,slogan):
        plt.plot(self.t,self.z,style,label=slogan)
        plt.title('Lorenz model z verse time')
        plt.xlabel('time')
        plt.ylabel('z')
        
    def plxz(self,style):
        plt.plot(self.x,self.z,style)
        plt.xlabel('x')
        plt.ylabel('z')
        
    def pl3d(self):
        f=plt.figure()
        p=f.gca(projection='3d')
        p.plot(self.x,self.y,self.z)
        plt.xlabel('x')
        plt.ylabel('y')
        plt.show()
    
    def pl_section_yz(self,color,slogan):
        plt.scatter(self.new_y_x0,self.new_z_x0,s=0.1,c=color,label=slogan)
        plt.title('Phase space plot: z verse y when x=0')
        plt.xlabel('y')
        plt.ylabel('z')
        plt.legend()
        plt.show()

    def pl_section_xz(self,color,slogan):
        plt.scatter(self.new_x_y0,self.new_z_y0,s=0.1,c=color,label=slogan)
        plt.title('Phase space plot: z verse x when y=0')
        plt.xlabel('x')
        plt.ylabel('z')
        plt.legend()
        plt.show()


#picture 1ï¼š   
#A=lorenz_model(tau=5)
#A.Euler_method()
#A.pltz('r--','r=5')

#B=lorenz_model(tau=10)
#B.Euler_method()
#B.pltz('b:','r=10')

#C=lorenz_model(tau=25)
#C.Euler_method()
#C.pltz('k-','r=25')

#plt.legend()
#plt.show()


#picture 2:
#A=lorenz_model(tau=25)
#A.Euler_method()
#A.plxz('k-')

#plt.title('Phase space plot z verse x')

#plt.legend()
#plt.show()


#pictyre 2+:
#A=lorenz_model(tau=25)
#A.Euler_method()
#A.pl3d()


#picture 3-1:
#A=lorenz_model(tau=25)
#A.phase_section()
#A.pl_section_yz(color='b',slogan='r=25')


#picture 3-2:
#A=lorenz_model(tau=25)
#A.phase_section()
#A.pl_section_xz(color='b',slogan='r=25')
