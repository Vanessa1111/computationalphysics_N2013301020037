 Background: 
   we found that atmospheric drag plays a role in the behavior of projectiles moving near the earth's surface. In some respects, 
this drag and other types of "friction" obsure the fundamental physics principles that govern the behavior. If we want to study
the essential consequences of these principles, it thus seems best to consider a system in which frictional forces are as small
as possible. The solar system is just such a laboratory, and not surprisingly, studies of the motion of planets and moons
provided major inspiration to the founders of classical mechanics.We will consider several problems that arise in the study of 
planetary motion. We begin with the simplest situation, a sun  and a single planet, and investigate a few of the properties of
this model solar system. While a computational approach is  not required in this case, the algorithm we develop will prove 
useful for later problems. Additionally, comparisons of the numerical results obtained with this algorithm with exact solutions
will provide valuable insight into the nature of our  approximations.
   we use the previous values of position and velocity to update the velocities, while the previous values of position and the
new values of velocity are used to update the positions. As we discussed, the Euler method is not a good choice for oscillatory
problems, and planetary motion is just such a problem. If we were to use the Euler method here we would find that the energy 
od the planet would grow with time, and it would spiral away from the Sun. 
If we were to use *SI** units, a graph showing this orbits around the Sun would have lables of 110^11, 210^11 m, etc. 
This would be awkward, though not impossibly so. It is much more convenient to use astronomical units, AU, which are defined
 as follows. One astronomical units of length, known simply as 1 AU, is the average distance between the Sun and Earth 
 ( =1.510^11 m ). It is convenient to measure time in years ( 1 year=3.210^7 s ) since this unit matches the solar system
 better than, say, seconds. For the remainder of this chapter we will, therefore, use astronomical units for distance, and
 measure time in years, unless specifically noted otherwise.
To complete our system of units we also need the corresponding unit of mass. This is easily derived if we recall that Earth's
orbit is, to a very good approximation, circular. 
THE CODE IS AS FOLLOWS:
import matplotlib.pyplot as plt
import numpy as np
import math

class planet(object):
    def __init__(self,_v0=[0.,-2./3.*np.sqrt(6.*np.pi)],_t=0., _dt=0.0001, _time=7.):
        self.x, self.y, = [1], [0.]
	self.vx, self.vy, = [_v0[0]], [_v0[1]]
	self.t = [_t]
        self.dt, self.time, self.n=_dt, _time, int(_time/_dt)
	self.m=4*np.pi
    def calculate(self):
        for i in range(self.n):
            self.r=np.sqrt(self.x[-1]**2+self.y[-1]**2)
            self.vx.append(self.vx[-1]+self.dt*(-self.m*self.x[-1]/self.r**3))
            self.vy.append(self.vy[-1]+self.dt*(-self.m*self.y[-1]/self.r**3))
            self.x.append(self.x[-1]+self.vx[-1]*self.dt)
            self.y.append(self.y[-1]+self.vy[-1]*self.dt)
    def plot_x_y(self,_ax):
	_ax.plot(self.x, self.y,label=r'$\beta$=2')  

class planet2(planet):
    def calculate(self):
        for i in range(self.n):
            self.r=np.sqrt(self.x[-1]**2+self.y[-1]**2)
            self.vx.append(self.vx[-1]+self.dt*(-self.m*self.x[-1]/self.r**3.05))
            self.vy.append(self.vy[-1]+self.dt*(-self.m*self.y[-1]/self.r**3.05))
            self.x.append(self.x[-1]+self.vx[-1]*self.dt)
            self.y.append(self.y[-1]+self.vy[-1]*self.dt)
    def plot_x_y2(self,_ax):
	_ax.plot(self.x, self.y,label=r'$\beta$=2.05')  

class planet3(planet):
    def calculate(self):
        for i in range(self.n):
            self.r=np.sqrt(self.x[-1]**2+self.y[-1]**2)
            self.vx.append(self.vx[-1]+self.dt*(-self.m*self.x[-1]/self.r**3.15))
            self.vy.append(self.vy[-1]+self.dt*(-self.m*self.y[-1]/self.r**3.15))
            self.x.append(self.x[-1]+self.vx[-1]*self.dt)
            self.y.append(self.y[-1]+self.vy[-1]*self.dt)
    def plot_x_y3(self,_ax):
	_ax.plot(self.x, self.y,label=r'$\beta$=2.15')  

class planet4(planet):
    def calculate(self):
        for i in range(self.n):
            self.r=np.sqrt(self.x[-1]**2+self.y[-1]**2)
            self.vx.append(self.vx[-1]+self.dt*(-self.m*self.x[-1]/self.r**3.25))
            self.vy.append(self.vy[-1]+self.dt*(-self.m*self.y[-1]/self.r**3.25))
            self.x.append(self.x[-1]+self.vx[-1]*self.dt)
            self.y.append(self.y[-1]+self.vy[-1]*self.dt)
    def plot_x_y4(self,_ax):
	_ax.plot(self.x, self.y,label=r'$\beta$=2.25')  

fig=plt.figure(figsize=(10,5)) 
ax1 = plt.subplot(211)
ax2 = plt.subplot(212)
ax3 = plt.subplot(221)
ax4 = plt.subplot(222)
comp= planet()
comp.calculate()
comp.plot_x_y(ax1)
comp= planet2()
comp.calculate()
comp.plot_x_y2(ax2)
comp= planet3()
comp.calculate()
comp.plot_x_y3(ax3)
comp= planet4()
comp.calculate()
comp.plot_x_y4(ax4)
ax1.set_xlabel(r'$x$'+' (AU)',fontsize=18)
ax1.set_ylabel(r'$y$'+' (AU)',fontsize=18)
ax2.set_xlabel(r'$x$'+' (AU)',fontsize=18)
ax2.set_ylabel(r'$y$'+' (AU)',fontsize=18)
ax3.set_ylabel(r'$y$'+' (AU)',fontsize=18)
ax3.set_title('binary system',fontsize=18)
ax4.set_title('binary system',fontsize=18)
ax1.legend(loc='lower right')
ax2.legend(loc='lower right')
ax3.legend(loc='lower right')
ax4.legend(loc='lower right')
plt.show(fig)
