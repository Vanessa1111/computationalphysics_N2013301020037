    consider several topics associated with wave motion. While the central ideas in this discussion are applicable to virtually
 all types of waves, we will find it convenient to consider the particular case of waves on a string. After introducing and 
 developing a solution for the wave equation in the ideal case ( that is, for a perfectly flexible, frictionless string ), we 
 then extend our modeling to deal with waves in several more realistic situations. This will lead us to some interesting issues 
 that arise in connection with musical instruments.
   Superficially, it bears some resemblance to Laplace's equation, as both contain a second-order spatial derivative. However, 
 with it we wish to solve for the time-dependent solution y(x,t) rather than a stationary solution. Thus, the relaxation methods 
 described are not suitable. We must therefore attack the wave equation with rather different numerical treatments than those
 that we employed in our work with Laplace's equation. After we develop an algorithm suitable for it, we will use it to explore
 several aspects of wave motion and also the behavior of more realistic models, including the stiffness of the string ( which
 leads to an effect known as dispersion ) and friction ( i.e., damping ). 
     This arises in many situations, including waves on a string, electromagnetic waves, waves on the surface of a lake, 
   and sound waves. Here we will use a language appropriate for waves on a string, although our methods and conclusions will apply
   to other cases as well. y is then the displacement of the string from its equilibrium (undisturbed) form. x is distance 
   measured along the string, t is the time, and c is a parameter that turns out to be the speed with which a wave moves on the 
   string.To construct a numerical approach to the wave equation, we will, as usual, write it in finite difference form. We 
   treat both x and t as discrete varibles with x = i*delta x and i = n*delta t. The displacement of the string is then a
   function of both i and n, which we write as y(i,n) = y( x = idelta x, i = ndelta t ) so that the first index of y specifies 
   the spatial coordinate and the second index corresponds to time. We have already the needed expression for the second partial 
   derivative, and inserting it into the wave equation yields.
   the code is as follows:
   import numpy 
from matplotlib import pyplot 
from matplotlib import animation


c1, c2 = 300 ,150
det_x = 0.003
det_t= det_x / 300
x0, x1 = 0.3, 0.7
k = 1000
X = numpy.arange(0, 1, det_x)
Y1 = [numpy.exp(-k*(x-x0)**2) for x in X]
Y2 = [numpy.exp(-k*(x-x1)**2/5) for x in X]
Y1[0], Y1[-1] = 0., 0.
Y2[0], Y2[-1] = 0., 0.
pre_Y1, next_Y1 = [y for y in Y1], [y for y in Y1]
pre_Y2, next_Y2 = [y for y in Y2], [y for y in Y2]
r1, r2 = c1 * det_t / det_x, c2 * det_t / det_x

fig = pyplot.figure(figsize=(15,6))
xmin, xmax =  0., 1.
ymin, ymax = -1., 1.
dx = (xmax - xmin) * 0.1
dy = (ymax - ymin) * 0.1
ax = pyplot.axes(xlim=(xmin-dx, xmax+dx), ylim=(ymin-dy, ymax+dy))
line, = ax.plot([], [])

# name the axis
pyplot.xlabel(r'$x(m)$', fontsize=16)
pyplot.ylabel(r'$y(m)$', fontsize=16)

# draw animation
def initAnimation():   
    line.set_data([], [])
    return line,

def animate(i):
    global X, Y1, pre_Y1, next_Y1, Y2, pre_Y2, next_Y2
    for j in xrange(1, len(X)-1):
        next_Y1[j] = 2*(1-r1**2)*Y1[j] - pre_Y1[j] + r1**2*(Y1[j+1]+Y1[j-1])
        next_Y2[j] = 2*(1-r2**2)*Y2[j] - pre_Y2[j] + r2**2*(Y2[j+1]+Y2[j-1])
    pre_Y1, pre_Y2 = [y for y in Y1], [y for y in Y2]
    Y1, Y2 = [y for y in next_Y1], [y for y in next_Y2]
    tmp = [Y1[k]+Y2[k] for k in xrange(len(X))]
    line.set_data(X, tmp)   
    return line,

anim1 = animation.FuncAnimation(fig, animate, init_func=initAnimation, interval=20, blit=True)
pyplot.title('r1=1,r2=0.45')
pyplot.show()
